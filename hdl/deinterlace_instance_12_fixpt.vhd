-- -------------------------------------------------------------
-- 
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/deinterlace_instance_12/hdlsrc/deinterlace_instance_12_fixpt.vhd
-- Created: 2023-03-14 11:44:22
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ch1_val_re                    ce_out        1
-- ch1_val_im                    ce_out        1
-- ch2_val_re                    ce_out        1
-- ch2_val_im                    ce_out        1
-- bin                           ce_out        1
-- ready                         ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: deinterlace_instance_12_fixpt
-- Source Path: deinterlace_instance_12_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.deinterlace_instance_12_fixpt_pkg.ALL;

ENTITY deinterlace_instance_12_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        fft_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        fft_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        fft_valid                         :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        ch1_val_re                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch1_val_im                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_re                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_im                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        bin                               :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        ready                             :   OUT   std_logic
        );
END deinterlace_instance_12_fixpt;


ARCHITECTURE rtl OF deinterlace_instance_12_fixpt IS

  -- Functions
  -- HDL_SIM_INDEX_CHECK: Enabled by the "SimIndexCheck" option.
  FUNCTION hdl_sim_index_check(addr : integer; low: integer; high: integer ) RETURN integer IS
  BEGIN
    --pragma translate off
    IF addr >= low AND addr <= high THEN
      RETURN addr;
    ELSE
      -- Index out of bounds. Undefined result. Return arbitrary value in range.
      RETURN low;
    END IF;
    --pragma translate on
    return addr;
  END FUNCTION;

  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL count_out                        : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count                            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp                              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_3                            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_4                            : std_logic;
  SIGNAL fft_val_b_re                     : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_b_im                     : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_re                           : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im                           : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_5                            : std_logic;
  SIGNAL fft_val_re_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_im_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_6                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_re_1                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL tmp_im_1                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL buf_re                           : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL buf_im                           : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL buf_re_1                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL buf_im_1                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL tmp_re_2                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL tmp_im_2                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL tmp_re_3                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL tmp_im_3                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL tmp_re_4                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL tmp_im_4                         : vector_of_signed32(0 TO 2047);  -- sfix32_En7 [2048]
  SIGNAL bin_tmp                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_re_5                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im_5                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL p0tmp_add_temp                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL p0tmp_sub_cast                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p0tmp_add_temp_1                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL p0tmp_sub_cast_1                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_re_6                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im_6                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_re_7                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im_7                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL c_re                             : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL c_im                             : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p9c_add_cast                     : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p9c_add_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p9c_add_cast_2                   : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p9c_cast                         : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p9c_cast_1                       : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p9c_add_cast_3                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL p9c_add_cast_4                   : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL ch1_val_re_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch1_val_im_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL p8ch1_val_cast                   : signed(65 DOWNTO 0);  -- sfix66_En39
  SIGNAL p8ch1_val_cast_1                 : signed(64 DOWNTO 0);  -- sfix65_En39
  SIGNAL p8ch1_val_cast_2                 : signed(65 DOWNTO 0);  -- sfix66_En39
  SIGNAL p8ch1_val_cast_3                 : signed(64 DOWNTO 0);  -- sfix65_En39
  SIGNAL c_re_1                           : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL c_im_1                           : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p7c_sub_cast                     : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p7c_sub_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p7c_sub_cast_2                   : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p7c_cast                         : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p7c_cast_1                       : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p7c_sub_cast_3                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL p7c_sub_cast_4                   : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL br                               : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL bi                               : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL ch2_val_re_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch2_val_im_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL p4ch2_val_mul_temp               : signed(66 DOWNTO 0);  -- sfix67_En39
  SIGNAL p4ch2_val_cast                   : signed(67 DOWNTO 0);  -- sfix68_En39
  SIGNAL p4ch2_val_cast_1                 : signed(67 DOWNTO 0);  -- sfix68_En39
  SIGNAL p4ch2_val_mul_temp_1             : signed(66 DOWNTO 0);  -- sfix67_En39

BEGIN
  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt_trueregionp25
  count_out <= to_unsigned(16#000#, 12);

  enb <= clk_enable;

  -- 'deinterlace_instance_12_fixpt:38' count_out = fi(int16(0), 0, 12, 0, fm);
  -- 
  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt_falseregionp25
  tmp <= count + to_unsigned(16#001#, 12);

  
  tmp_1 <= '1' WHEN count = to_unsigned(16#FFF#, 12) ELSE
      '0';

  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt_trueregionp2
  
  tmp_2 <= tmp WHEN tmp_1 = '0' ELSE
      count_out;

  -- 'deinterlace_instance_12_fixpt:29' if fft_valid
  
  tmp_3 <= count WHEN fft_valid = '0' ELSE
      tmp_2;

  count_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count <= tmp_3;
      END IF;
    END IF;
  END PROCESS count_reg_process;


  -- 'deinterlace_instance_12_fixpt:20' if (count>fi(2048, 0, 12, 0, fm))
  
  tmp_4 <= '1' WHEN count > to_unsigned(16#800#, 12) ELSE
      '0';

  -- 'deinterlace_instance_12_fixpt:19' fft_val_b = fi(complex(0,0), 1, 32, 7, fm);
  fft_val_b_re <= to_signed(0, 32);
  fft_val_b_im <= to_signed(0, 32);

  -- 'deinterlace_instance_12_fixpt:21' fft_val_b(:) = buf(bin+fi(1, 0, 1, 0, fm)+fi(1, 0, 1, 0, fm));
  -- 
  -- 'deinterlace_instance_12_fixpt:22' elseif (count<fi(2048, 0, 12, 0, fm))
  -- 
  -- 'deinterlace_instance_12_fixpt:23' buf(count+fi(1, 0, 1, 0, fm)) = fft_val;
  tmp_re <= to_signed(0, 32);
  tmp_im <= to_signed(0, 32);

  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt_falseregionp15
  
  tmp_5 <= '1' WHEN count < to_unsigned(16#800#, 12) ELSE
      '0';

  fft_val_re_signed <= signed(fft_val_re);

  fft_val_im_signed <= signed(fft_val_im);

  -- 'deinterlace_instance_12_fixpt:30' count(:) = count_up_instance_12(count);
  -- 
  -- 'deinterlace_instance_12_fixpt:35' fm = get_fimath();
  -- 
  -- 'deinterlace_instance_12_fixpt:37' if (count_in== fi(4096-1, 0, 12, 0, fm))
  -- 
  -- 'deinterlace_instance_12_fixpt:39' else
  -- 
  -- 'deinterlace_instance_12_fixpt:40' count_out = fi(count_in + fi(1, 0, 1, 0, fm), 0, 12, 0, fm);
  tmp_6 <= signed(resize(count, 32));

  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt
  tmp_re_1 <= (OTHERS => to_signed(0, 32));
  tmp_im_1 <= (OTHERS => to_signed(0, 32));

  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt_falseregionp15_trueregionp1
  p0buf_output : PROCESS (buf_im, buf_re, fft_val_im_signed, fft_val_re_signed, tmp_6)
  BEGIN
    buf_re_1 <= buf_re;
    buf_im_1 <= buf_im;
    buf_re_1(hdl_sim_index_check(to_integer(tmp_6), 0, 2047)) <= fft_val_re_signed;
    buf_im_1(hdl_sim_index_check(to_integer(tmp_6), 0, 2047)) <= fft_val_im_signed;
  END PROCESS p0buf_output;


  
  tmp_re_2 <= buf_re WHEN tmp_5 = '0' ELSE
      buf_re_1;
  
  tmp_im_2 <= buf_im WHEN tmp_5 = '0' ELSE
      buf_im_1;

  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt_falseregionp11
  
  tmp_re_3 <= tmp_re_2 WHEN tmp_4 = '0' ELSE
      tmp_re_1;
  
  tmp_im_3 <= tmp_im_2 WHEN tmp_4 = '0' ELSE
      tmp_im_1;

  
  tmp_re_4 <= tmp_re_3 WHEN tmp_4 = '0' ELSE
      buf_re;
  
  tmp_im_4 <= tmp_im_3 WHEN tmp_4 = '0' ELSE
      buf_im;

  buf_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      buf_re <= (OTHERS => to_signed(0, 32));
      buf_im <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        buf_re <= tmp_re_4;
        buf_im <= tmp_im_4;
      END IF;
    END IF;
  END PROCESS buf_reg_process;


  -- 'deinterlace_instance_12_fixpt:18' bin = fi(int16(fi(4096-1, 0, 12, 0, fm)-count), 0, 12, 0, fm);
  bin_tmp <= to_unsigned(16#FFF#, 12) - count;

  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt_trueregionp17
  p0tmp_add_temp <= resize(resize(bin_tmp, 13) + to_unsigned(16#0001#, 13), 14) + to_unsigned(16#0001#, 14);
  p0tmp_sub_cast <= signed(resize(p0tmp_add_temp, 32));
  tmp_re_5 <= buf_re(hdl_sim_index_check(to_integer(p0tmp_sub_cast - 1), 0, 2047));
  p0tmp_add_temp_1 <= resize(resize(bin_tmp, 13) + to_unsigned(16#0001#, 13), 14) + to_unsigned(16#0001#, 14);
  p0tmp_sub_cast_1 <= signed(resize(p0tmp_add_temp_1, 32));
  tmp_im_5 <= buf_im(hdl_sim_index_check(to_integer(p0tmp_sub_cast_1 - 1), 0, 2047));

  -- HDL code generation from MATLAB function: deinterlace_instance_12_fixpt_trueregionp13
  
  tmp_re_6 <= tmp_re WHEN tmp_4 = '0' ELSE
      tmp_re_5;
  
  tmp_im_6 <= tmp_im WHEN tmp_4 = '0' ELSE
      tmp_im_5;

  
  tmp_re_7 <= fft_val_b_re WHEN tmp_4 = '0' ELSE
      tmp_re_6;
  
  tmp_im_7 <= fft_val_b_im WHEN tmp_4 = '0' ELSE
      tmp_im_6;

  -- 'deinterlace_instance_12_fixpt:26' ch1_val = fi(fi(0.5, 0, 32, 32, fm)*(fft_val_b+conj(fft_val)), 1, 32, 7, fm);
  p9c_add_cast <= resize(tmp_re_7, 33);
  p9c_add_cast_1 <= resize(fft_val_re_signed, 33);
  c_re <= p9c_add_cast + p9c_add_cast_1;
  p9c_add_cast_2 <= resize(tmp_im_7, 33);
  p9c_cast <= resize(fft_val_im_signed, 33);
  p9c_cast_1 <=  - (p9c_cast);
  p9c_add_cast_3 <= p9c_cast_1(31 DOWNTO 0);
  p9c_add_cast_4 <= resize(p9c_add_cast_3, 33);
  c_im <= p9c_add_cast_2 + p9c_add_cast_4;

  p8ch1_val_cast <= resize(c_re & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66);
  p8ch1_val_cast_1 <= p8ch1_val_cast(64 DOWNTO 0);
  ch1_val_re_tmp <= p8ch1_val_cast_1(63 DOWNTO 32);
  p8ch1_val_cast_2 <= resize(c_im & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66);
  p8ch1_val_cast_3 <= p8ch1_val_cast_2(64 DOWNTO 0);
  ch1_val_im_tmp <= p8ch1_val_cast_3(63 DOWNTO 32);

  ch1_val_re <= std_logic_vector(ch1_val_re_tmp);

  ch1_val_im <= std_logic_vector(ch1_val_im_tmp);

  -- 'deinterlace_instance_12_fixpt:27' ch2_val = fi(complexx(fi(0, 0, 1, 0, fm),fi_uminus(fi(0.5, 0, 32, 32, fm)))*(fft_val_b-conj(fft_val)), 
  -- 1, 32, 7, fm)
  p7c_sub_cast <= resize(tmp_re_7, 33);
  p7c_sub_cast_1 <= resize(fft_val_re_signed, 33);
  c_re_1 <= p7c_sub_cast - p7c_sub_cast_1;
  p7c_sub_cast_2 <= resize(tmp_im_7, 33);
  p7c_cast <= resize(fft_val_im_signed, 33);
  p7c_cast_1 <=  - (p7c_cast);
  p7c_sub_cast_3 <= p7c_cast_1(31 DOWNTO 0);
  p7c_sub_cast_4 <= resize(p7c_sub_cast_3, 33);
  c_im_1 <= p7c_sub_cast_2 - p7c_sub_cast_4;

  br <= c_re_1;

  bi <= c_im_1;

  -- CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  p4ch2_val_mul_temp <=  - (resize(bi & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 67));
  p4ch2_val_cast <= resize(p4ch2_val_mul_temp, 68);
  p4ch2_val_cast_1 <=  - (p4ch2_val_cast);
  ch2_val_re_tmp <= p4ch2_val_cast_1(63 DOWNTO 32);
  -- CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  p4ch2_val_mul_temp_1 <=  - (resize(br & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 67));
  ch2_val_im_tmp <= p4ch2_val_mul_temp_1(63 DOWNTO 32);

  ch2_val_re <= std_logic_vector(ch2_val_re_tmp);

  ch2_val_im <= std_logic_vector(ch2_val_im_tmp);

  bin <= std_logic_vector(bin_tmp);

  -- 'deinterlace_instance_12_fixpt:17' ready = fft_valid & (count>fi(2048, 0, 12, 0, fm));
  -- 
  -- 'deinterlace_instance_12_fixpt:12' if isempty(count)
  -- 
  -- 'deinterlace_instance_12_fixpt:8' fm = get_fimath();
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --          Generated by MATLAB 9.12 and Fixed-Point Designer 7.4           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  ready <= fft_valid AND hdlcoder_to_stdlogic(count > to_unsigned(16#800#, 12));

  ce_out <= clk_enable;

END rtl;