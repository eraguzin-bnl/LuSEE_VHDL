-- -------------------------------------------------------------
-- 
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/correlate/hdlsrc/correlate_fixpt.vhd
-- Created: 2023-03-09 14:36:09
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: correlate_fixpt
-- Source Path: correlate_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.spectrometer_fixpt_pkg.ALL;

ENTITY correlate_fixpt IS
    generic(
      size : integer := 32
      );
  PORT( 
        clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        bin_in                            :   IN    std_logic_vector(12 DOWNTO 0);
        fft_ready_in                      :   IN    std_logic;
        ch1_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch1_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch3_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch3_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch4_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch4_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        index_array                       :   IN    vector_of_std_logic_vector6(9 downto 0);
        A1                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_E15
        A2                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_E15
        A3                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
        A4                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_E15
        X12R                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
        X12I                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
        X13R                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
        X13I                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
        X14R                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
        X14I                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
        X23R                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
        X23I                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
        X24R                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
        X24I                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
        X34R                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
        X34I                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
        bin_out                           :   OUT   std_logic_vector(12 DOWNTO 0);
        error_out                         :   OUT   std_logic_vector(9 DOWNTO 0);
        fft_ready_out                     :   OUT   std_logic
        );
END correlate_fixpt;


ARCHITECTURE rtl OF correlate_fixpt IS

  -- Signals
  SIGNAL ch1_val_re_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch1_val_im_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch2_val_re_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch2_val_im_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch3_val_re_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch3_val_im_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch4_val_re_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch4_val_im_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL A1_tmp                           : std_logic_vector(31 DOWNTO 0);  -- ufix32_E15
  SIGNAL A2_tmp                           : std_logic_vector(31 DOWNTO 0);  -- ufix32_E15
  SIGNAL A3_tmp                           : std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
  SIGNAL A4_tmp                           : std_logic_vector(31 DOWNTO 0);  -- ufix32_E15
  SIGNAL X12R_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
  SIGNAL X12I_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
  SIGNAL X13R_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
  SIGNAL X13I_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
  SIGNAL X14R_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
  SIGNAL X14I_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
  SIGNAL X23R_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
  SIGNAL X23I_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
  SIGNAL X24R_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
  SIGNAL X24I_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
  SIGNAL X34R_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E6
  SIGNAL X34I_tmp                         : std_logic_vector(31 DOWNTO 0);  -- sfix32_E14
  
  SIGNAL ch1_im_cast                      : signed(32 DOWNTO 0);
  SIGNAL ch1_im_negative                  : signed(32 DOWNTO 0);
  SIGNAL ch1_im_complement                : signed(31 DOWNTO 0);
  
  SIGNAL ch2_im_cast                      : signed(32 DOWNTO 0);
  SIGNAL ch2_im_negative                  : signed(32 DOWNTO 0);
  SIGNAL ch2_im_complement                 : signed(31 DOWNTO 0);
  
  SIGNAL ch3_im_cast                      : signed(32 DOWNTO 0);
  SIGNAL ch3_im_negative                  : signed(32 DOWNTO 0);
  SIGNAL ch3_im_complement                : signed(31 DOWNTO 0);
  
  SIGNAL ch4_im_cast                      : signed(32 DOWNTO 0);
  SIGNAL ch4_im_negative                  : signed(32 DOWNTO 0);
  SIGNAL ch4_im_complement                : signed(31 DOWNTO 0);
  
  SIGNAL error_0                           : std_logic;
  SIGNAL error_1                           : std_logic;
  SIGNAL error_2                           : std_logic;
  SIGNAL error_3                           : std_logic;
  SIGNAL error_4                           : std_logic;
  SIGNAL error_5                           : std_logic;
  SIGNAL error_6                           : std_logic;
  SIGNAL error_7                           : std_logic;
  SIGNAL error_8                           : std_logic;
  SIGNAL error_9                           : std_logic;
  --SIGNAL error_s                          : std_logic_vector(9 DOWNTO 0);
  
  SIGNAL bin_s1                           : std_logic_vector(12 DOWNTO 0);
  SIGNAL bin_s2                           : std_logic_vector(12 DOWNTO 0);
  SIGNAL bin_s3                           : std_logic_vector(12 DOWNTO 0);
  SIGNAL bin_s4                           : std_logic_vector(12 DOWNTO 0);
  SIGNAL bin_s5                           : std_logic_vector(12 DOWNTO 0);
  SIGNAL bin_s6                           : std_logic_vector(12 DOWNTO 0);
  SIGNAL bin_s7                           : std_logic_vector(12 DOWNTO 0);
  SIGNAL bin_s8                           : std_logic_vector(12 DOWNTO 0);

BEGIN
    process (clk) begin
        if (rising_edge(clk)) then
            if (reset = '1') then
                bin_s1 <= (others=>'0');
                bin_s2 <= (others=>'0');
                bin_s3 <= (others=>'0');
                bin_s4 <= (others=>'0');
                bin_s5 <= (others=>'0');
                bin_s6 <= (others=>'0');
                bin_s7 <= (others=>'0');
                bin_s8 <= (others=>'0');
                bin_out <= (others=>'0');
                
                error_0 <= '0';
                error_1 <= '0';
                error_2 <= '0';
                error_3 <= '0';
                error_4 <= '0';
                error_5 <= '0';
                error_6 <= '0';
                error_7 <= '0';
                error_8 <= '0';
                error_9 <= '0';
            else
                -- 5 delays for the multiplication in Multiply_generic_32
                -- 3 delays for the correlate_operation delay
                bin_s1 <= bin_in;
                bin_s2 <= bin_s1;
                bin_s3 <= bin_s2;
                bin_s4 <= bin_s3;
                bin_s5 <= bin_s4;
                bin_s6 <= bin_s5;
                bin_s7 <= bin_s6;
                --bin_s8 <= bin_s7;
                bin_out <= bin_s7;
            end if;
        end if;
    end process;
    ch1_val_re_signed <= signed(ch1_val_re);
    ch1_val_im_signed <= signed(ch1_val_im);
    ch2_val_re_signed <= signed(ch2_val_re);
    ch2_val_im_signed <= signed(ch2_val_im);
    ch3_val_re_signed <= signed(ch3_val_re);
    ch3_val_im_signed <= signed(ch3_val_im);
    ch4_val_re_signed <= signed(ch4_val_re);
    ch4_val_im_signed <= signed(ch4_val_im);
    
    ch1_im_cast <= resize(ch1_val_im_signed, 33);
    ch1_im_negative <=  - (ch1_im_cast);
    ch1_im_complement <= ch1_im_negative(31 DOWNTO 0);
    
    ch2_im_cast <= resize(ch2_val_im_signed, 33);
    ch2_im_negative <=  - (ch2_im_cast);
    ch2_im_complement <= ch2_im_negative(31 DOWNTO 0);
    
    ch3_im_cast <= resize(ch3_val_im_signed, 33);
    ch3_im_negative <=  - (ch3_im_cast);
    ch3_im_complement <= ch3_im_negative(31 DOWNTO 0);
    
    ch4_im_cast <= resize(ch4_val_im_signed, 33);
    ch4_im_negative <=  - (ch4_im_cast);
    ch4_im_complement <= ch4_im_negative(31 DOWNTO 0);
  
    A1_corr : entity work.correlate_operation
        generic map(
            size => size,
            operation => '0'
            )
        port map(
            -- Inputs
            clk => clk,
            rstb => reset,
            m1_1 => std_logic_vector(ch1_val_re_signed),
            m1_2 => std_logic_vector(ch1_val_re_signed),
            m2_1 => std_logic_vector(ch1_val_im_signed),
            m2_2 => std_logic_vector(ch1_im_complement),
            index => index_array(0),

            --Valid
            valid_in => fft_ready_in,
            valid_out => fft_ready_out,

            -- Outputs
            error => error_0,
            o_m => A1_tmp
        );
        
    A2_corr : entity work.correlate_operation
        generic map(
            size => size,
            operation => '0'
            )
        port map(
            -- Inputs
            clk => clk,
            rstb => reset,
            m1_1 => std_logic_vector(ch2_val_re_signed),
            m1_2 => std_logic_vector(ch2_val_re_signed),
            m2_1 => std_logic_vector(ch2_val_im_signed),
            m2_2 => std_logic_vector(ch2_im_complement),
            index => index_array(1),

            --Valid
            valid_in => fft_ready_in,
            valid_out => open,

            -- Outputs
            error => error_1,
            o_m => A2_tmp
        );
        
    A3_corr : entity work.correlate_operation
        generic map(
            size => size,
            operation => '0'
            )
        port map(
            -- Inputs
            clk => clk,
            rstb => reset,
            m1_1 => std_logic_vector(ch3_val_re_signed),
            m1_2 => std_logic_vector(ch3_val_re_signed),
            m2_1 => std_logic_vector(ch3_val_im_signed),
            m2_2 => std_logic_vector(ch3_im_complement),
            index => index_array(2),

            --Valid
            valid_in => fft_ready_in,
            valid_out => open,

            -- Outputs
            error => error_2,
            o_m => A3_tmp
        );
        
    A4_corr : entity work.correlate_operation
        generic map(
            size => size,
            operation => '0'
            )
        port map(
            -- Inputs
            clk => clk,
            rstb => reset,
            m1_1 => std_logic_vector(ch4_val_re_signed),
            m1_2 => std_logic_vector(ch4_val_re_signed),
            m2_1 => std_logic_vector(ch4_val_im_signed),
            m2_2 => std_logic_vector(ch4_im_complement),
            index => index_array(3),

            --Valid
            valid_in => fft_ready_in,
            valid_out => open,

            -- Outputs
            error => error_3,
            o_m => A4_tmp
        );
        
    X12R_corr : entity work.correlate_operation
        generic map(
            size => size,
            operation => '0'
            )
        port map(
            -- Inputs
            clk => clk,
            rstb => reset,
            m1_1 => std_logic_vector(ch1_val_re_signed),
            m1_2 => std_logic_vector(ch2_val_re_signed),
            m2_1 => std_logic_vector(ch1_val_im_signed),
            m2_2 => std_logic_vector(ch2_im_complement),
            index => index_array(4),

            --Valid
            valid_in => fft_ready_in,
            valid_out => open,

            -- Outputs
            error => error_4,
            o_m => X12R_tmp
        );
        
    X12I_corr : entity work.correlate_operation
    generic map(
        size => size,
        operation => '1'
        )
    port map(
        -- Inputs
        clk => clk,
        rstb => reset,
        m1_1 => std_logic_vector(ch1_val_re_signed),
        m1_2 => std_logic_vector(ch2_im_complement),
        m2_1 => std_logic_vector(ch1_val_im_signed),
        m2_2 => std_logic_vector(ch2_val_re_signed),
        index => index_array(5),

        --Valid
        valid_in => fft_ready_in,
        valid_out => open,

        -- Outputs
        error => error_5,
        o_m => X12I_tmp
    );

  A1 <= std_logic_vector(A1_tmp);
  A2 <= std_logic_vector(A2_tmp);
  A3 <= std_logic_vector(A3_tmp);
  A4 <= std_logic_vector(A4_tmp);
  X12R <= std_logic_vector(X12R_tmp);
  X12I <= std_logic_vector(X12I_tmp);
  X13R <= std_logic_vector(X13R_tmp);
  X13I <= std_logic_vector(X13I_tmp);
  X14R <= std_logic_vector(X14R_tmp);
  X14I <= std_logic_vector(X14I_tmp);
  X23R <= std_logic_vector(X23R_tmp);
  X23I <= std_logic_vector(X23I_tmp);
  X24R <= std_logic_vector(X24R_tmp);
  X24I <= std_logic_vector(X24I_tmp);
  X34R <= std_logic_vector(X34R_tmp);
  X34I <= std_logic_vector(X34I_tmp);
  
  error_out <= error_9 & error_8 & error_7 & error_6 & error_5 & error_4 & error_3 & error_2 & error_1 & error_0;

END rtl;

