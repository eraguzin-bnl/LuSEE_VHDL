-- -------------------------------------------------------------
-- 
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/weight_fold__instance_1_/hdlsrc/weight_fold_instance_1_fixpt.vhd
-- Created: 2023-01-17 10:38:13
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- val                           ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: weight_fold_instance_1_fixpt
-- Source Path: weight_fold__instance_1__fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY weight_fold_instance_1_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        sample_1                          :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        w1                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w2                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w3                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w4                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        ce_out                            :   OUT   std_logic;
        valo                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En18
        );
END weight_fold_instance_1_fixpt;


ARCHITECTURE rtl OF weight_fold_instance_1_fixpt IS

  -- Component Declarations
  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ndx                              : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL ndx_1                            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL tmp_2                            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL tmp_3                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_4                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_5                            : std_logic;
  SIGNAL tmp_6                            : std_logic;
  SIGNAL bndx                             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL bndx_1                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_7                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_8                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL bndx_2                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_9                            : std_logic;
  SIGNAL tmp_10                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_11                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_12                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_13                           : std_logic;
  SIGNAL tmp_14                           : std_logic;
  SIGNAL val_1                            : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL sample_1_signed                  : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_15                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_16                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL addr                             : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_17                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_18                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_19                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL tmp_20                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL addr_1                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL buf_ram_wrenb                    : std_logic;  -- ufix1
  SIGNAL tmp_21                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL buf                              : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL buf_signed                       : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_22                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_23                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_24                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL sample                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_25                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_26                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL w1_signed                        : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL w1_1                             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL w1_2                             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL tmp_27                           : signed(45 DOWNTO 0);  -- sfix46_En31
  SIGNAL tmp_28                           : std_logic;
  SIGNAL tmp_29                           : std_logic;
  SIGNAL val_2                            : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL addr_2                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_30                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_31                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_32                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_2            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL tmp_33                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL addr_3                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL buf_ram_wrenb_1                  : std_logic;  -- ufix1
  SIGNAL tmp_34                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_3            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL buf_1                            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL buf_signed_1                     : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_35                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_36                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_37                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_38                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_39                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL w2_signed                        : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL w2_1                             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL w2_2                             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL tmp_40                           : signed(45 DOWNTO 0);  -- sfix46_En31
  SIGNAL tmp_41                           : std_logic;
  SIGNAL tmp_42                           : std_logic;
  SIGNAL val_3                            : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL addr_4                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_43                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_44                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_45                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_4            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL tmp_46                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL addr_5                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL buf_ram_wrenb_2                  : std_logic;  -- ufix1
  SIGNAL tmp_47                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_5            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL buf_2                            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL buf_signed_2                     : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_48                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_49                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_50                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_51                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_52                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL w3_signed                        : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL w3_1                             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL w3_2                             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL tmp_53                           : signed(45 DOWNTO 0);  -- sfix46_En31
  SIGNAL tmp_54                           : std_logic;
  SIGNAL tmp_55                           : std_logic;
  SIGNAL val_4                            : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL addr_6                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_56                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_57                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_58                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_6            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL tmp_59                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL addr_7                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL buf_ram_wrenb_3                  : std_logic;  -- ufix1
  SIGNAL tmp_60                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_7            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL buf_3                            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL buf_signed_3                     : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_61                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_62                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_63                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_64                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL tmp_65                           : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL w4_signed                        : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL w4_1                             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL w4_2                             : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL tmp_66                           : signed(45 DOWNTO 0);  -- sfix46_En31
  SIGNAL tmp_67                           : signed(45 DOWNTO 0);  -- sfix46_En31
  SIGNAL tmp_68                           : signed(46 DOWNTO 0);  -- sfix47_En31
  SIGNAL tmp_69                           : signed(45 DOWNTO 0);  -- sfix46_En31
  SIGNAL tmp_70                           : signed(46 DOWNTO 0);  -- sfix47_En31
  SIGNAL tmp_71                           : signed(46 DOWNTO 0);  -- sfix47_En31
  SIGNAL tmp_72                           : signed(47 DOWNTO 0);  -- sfix48_En31
  SIGNAL tmp_73                           : signed(45 DOWNTO 0);  -- sfix46_En31
  SIGNAL tmp_74                           : signed(47 DOWNTO 0);  -- sfix48_En31
  SIGNAL tmp_75                           : signed(47 DOWNTO 0);  -- sfix48_En31
  SIGNAL tmp_76                           : signed(48 DOWNTO 0);  -- sfix49_En31
  SIGNAL tmp_77                           : signed(45 DOWNTO 0);  -- sfix46_En31
  SIGNAL tmp_78                           : signed(48 DOWNTO 0);  -- sfix49_En31
  SIGNAL tmp_79                           : signed(48 DOWNTO 0);  -- sfix49_En31
  SIGNAL tmp_80                           : signed(31 DOWNTO 0);  -- sfix32_En18

BEGIN
  u_buf_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 13,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din => std_logic_vector(tmp_18),
              wr_addr => std_logic_vector(indexLogic_fixptsig),
              wr_en => buf_ram_wrenb,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_1),
              rd_dout => buf
              );

  u_buf_ram_generic : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 13,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din => std_logic_vector(tmp_31),
              wr_addr => std_logic_vector(indexLogic_fixptsig_2),
              wr_en => buf_ram_wrenb_1,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_3),
              rd_dout => buf_1
              );

  u_buf_ram_1 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 13,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din => std_logic_vector(tmp_44),
              wr_addr => std_logic_vector(indexLogic_fixptsig_4),
              wr_en => buf_ram_wrenb_2,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_5),
              rd_dout => buf_2
              );

  u_buf_ram_2 : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 13,
                 DataWidth => 14
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din => std_logic_vector(tmp_57),
              wr_addr => std_logic_vector(indexLogic_fixptsig_6),
              wr_en => buf_ram_wrenb_3,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_7),
              rd_dout => buf_3
              );

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt
  ndx <= to_unsigned(16#0000#, 13);

  enb <= clk_enable;

  -- 'weight_fold__instance_1__fixpt:33' if (ndx==fi(4096, 0, 13, 0, fm))
  
  tmp <= '1' WHEN ndx_1 = to_unsigned(16#1000#, 13) ELSE
      '0';

  
  tmp_1 <= ndx_1 WHEN tmp = '0' ELSE
      ndx;

  -- 'weight_fold__instance_1__fixpt:97' val = fi(write_val, 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:34' ndx(:) = 0;
  -- 
  -- 'weight_fold__instance_1__fixpt:35' bndx(:) = bndx + fi(1, 0, 1, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:67' val = fi(write_val, 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:83' else
  -- 
  -- 'weight_fold__instance_1__fixpt:84' val = fi(buf(ndx+fi(1, 0, 1, 0, fm)), 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:81' buf(ndx+fi(1, 0, 1, 0, fm)) = write_val;
  -- 
  -- 'weight_fold__instance_1__fixpt:82' val = fi(write_val, 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:98' else
  -- 
  -- 'weight_fold__instance_1__fixpt:99' val = fi(buf(ndx+fi(1, 0, 1, 0, fm)), 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:96' buf(ndx+fi(1, 0, 1, 0, fm)) = write_val;
  -- 
  -- 'weight_fold__instance_1__fixpt:52' val = fi(write_val, 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:68' else
  -- 
  -- 'weight_fold__instance_1__fixpt:69' val = fi(buf(ndx+fi(1, 0, 1, 0, fm)), 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:66' buf(ndx+fi(1, 0, 1, 0, fm)) = write_val;
  -- 
  -- 'weight_fold__instance_1__fixpt:32' ndx(:) = ndx + fi(1, 0, 1, 0, fm);
  rd_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_2 <= to_unsigned(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_2 <= tmp_1;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  tmp_3 <= resize(tmp_2, 14);

  tmp_4 <= tmp_3 + to_unsigned(16#0001#, 14);

  ndx_1 <= tmp_4(12 DOWNTO 0);

  
  tmp_5 <= '1' WHEN ndx_1 = to_unsigned(16#1000#, 13) ELSE
      '0';

  rd_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_6 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_6 <= tmp_5;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  bndx <= to_unsigned(16#0#, 3);

  tmp_7 <= resize(bndx_1, 4);

  tmp_8 <= tmp_7 + to_unsigned(16#1#, 4);

  bndx_2 <= tmp_8(2 DOWNTO 0);

  
  tmp_9 <= '1' WHEN bndx_2 = to_unsigned(16#4#, 3) ELSE
      '0';

  
  tmp_10 <= bndx_2 WHEN tmp_9 = '0' ELSE
      bndx;

  rd_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_11 <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_11 <= tmp_10;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  rd_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_12 <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_12 <= bndx_1;
      END IF;
    END IF;
  END PROCESS rd_13_process;


  -- 'weight_fold__instance_1__fixpt:36' if (bndx==fi(4, 0, 3, 0, fm))
  -- 
  -- 'weight_fold__instance_1__fixpt:37' bndx(:)=0;
  -- 
  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt
  
  bndx_1 <= tmp_12 WHEN tmp_6 = '0' ELSE
      tmp_11;

  -- 'weight_fold__instance_1__fixpt:50' if (write)
  -- 
  -- 'weight_fold__instance_1__fixpt:47' if isempty(buf)
  -- 
  -- 'weight_fold__instance_1__fixpt:44' fm = get_fimath();
  -- 
  -- 'weight_fold__instance_1__fixpt:25' v1 = fi(ramwrap__instance_1_1_ (ndx, sample, bndx==fi(0, 0, 1, 0, fm)), 1, 
  -- 14, 0, fm)
  -- 
  -- 'weight_fold__instance_1__fixpt:23' assert(fi(4, 0, 3, 0, fm)==fi(4, 0, 3, 0, fm));
  -- 
  -- 'weight_fold__instance_1__fixpt:14' if isempty(buf1)
  
  tmp_13 <= '1' WHEN bndx_1 = to_unsigned(16#0#, 3) ELSE
      '0';

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_14 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_14 <= tmp_13;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  val_1 <= to_signed(16#0000#, 14);

  -- 'weight_fold__instance_1__fixpt:9' sample = fi(sample_1, 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:8' fm = get_fimath();
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --          Generated by MATLAB 9.12 and Fixed-Point Designer 7.4           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  sample_1_signed <= signed(sample_1);

  -- 'weight_fold__instance_1__fixpt:13' sample = fi(double(sample), 1, 14, 0, fm);
  tmp_15 <= resize(sample_1_signed, 32);

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_trueregionp92
  -- 
  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_trueregionp103
  -- 
  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_trueregionp81
  -- 
  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_trueregionp114
  tmp_16 <= tmp_15(13 DOWNTO 0);

  addr <= to_signed(16#00001000#, 32);

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_trueregionp116
  tmp_17 <= signed(resize(tmp_2, 32));

  
  tmp_18 <= val_1 WHEN tmp_13 = '0' ELSE
      tmp_16;

  
  tmp_19 <= addr WHEN tmp_13 = '0' ELSE
      tmp_17;

  indexLogic_fixptsig <= unsigned(tmp_19(12 DOWNTO 0));

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_falseregionp112
  tmp_20 <= signed(resize(tmp_2, 32));

  addr_1 <= to_signed(16#00001000#, 32);

  buf_ram_wrenb <= '1';

  
  tmp_21 <= tmp_20 WHEN tmp_13 = '0' ELSE
      addr_1;

  indexLogic_fixptsig_1 <= unsigned(tmp_21(12 DOWNTO 0));

  buf_signed <= signed(buf);

  tmp_22 <= to_signed(16#0000#, 14);

  rd_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_23 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_23 <= tmp_22;
      END IF;
    END IF;
  END PROCESS rd_8_process;


  
  tmp_24 <= buf_signed WHEN tmp_14 = '0' ELSE
      tmp_23;

  rd_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sample <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sample <= tmp_16;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  
  tmp_25 <= tmp_24 WHEN tmp_14 = '0' ELSE
      sample;

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_26 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_26 <= tmp_25;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  w1_signed <= signed(w1);

  rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      w1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        w1_1 <= w1_signed;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  HwModeRegister_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      w1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        w1_2 <= w1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_1_process;


  -- 'weight_fold__instance_1__fixpt:30' val = fi(v1*w1+v2*w2+v3*w3+v4*w4, 1, 32, 18, fm);
  tmp_27 <= tmp_26 * w1_2;

  -- 'weight_fold__instance_1__fixpt:65' if (write)
  -- 
  -- 'weight_fold__instance_1__fixpt:62' if isempty(buf)
  -- 
  -- 'weight_fold__instance_1__fixpt:59' fm = get_fimath();
  -- 
  -- 'weight_fold__instance_1__fixpt:26' v2 = fi(ramwrap__instance_1_2_ (ndx, sample, bndx==fi(1, 0, 1, 0, fm)), 1, 
  -- 14, 0, fm)
  
  tmp_28 <= '1' WHEN bndx_1 = to_unsigned(16#1#, 3) ELSE
      '0';

  rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_29 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_29 <= tmp_28;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  val_2 <= to_signed(16#0000#, 14);

  addr_2 <= to_signed(16#00001000#, 32);

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_trueregionp105
  tmp_30 <= signed(resize(tmp_2, 32));

  
  tmp_31 <= val_2 WHEN tmp_28 = '0' ELSE
      tmp_16;

  
  tmp_32 <= addr_2 WHEN tmp_28 = '0' ELSE
      tmp_30;

  indexLogic_fixptsig_2 <= unsigned(tmp_32(12 DOWNTO 0));

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_falseregionp101
  tmp_33 <= signed(resize(tmp_2, 32));

  addr_3 <= to_signed(16#00001000#, 32);

  buf_ram_wrenb_1 <= '1';

  
  tmp_34 <= tmp_33 WHEN tmp_28 = '0' ELSE
      addr_3;

  indexLogic_fixptsig_3 <= unsigned(tmp_34(12 DOWNTO 0));

  buf_signed_1 <= signed(buf_1);

  tmp_35 <= to_signed(16#0000#, 14);

  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_36 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_36 <= tmp_35;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  
  tmp_37 <= buf_signed_1 WHEN tmp_29 = '0' ELSE
      tmp_36;

  
  tmp_38 <= tmp_37 WHEN tmp_29 = '0' ELSE
      sample;

  HwModeRegister_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_39 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_39 <= tmp_38;
      END IF;
    END IF;
  END PROCESS HwModeRegister_2_process;


  w2_signed <= signed(w2);

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      w2_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        w2_1 <= w2_signed;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  HwModeRegister_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      w2_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        w2_2 <= w2_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_3_process;


  tmp_40 <= tmp_39 * w2_2;

  -- 'weight_fold__instance_1__fixpt:80' if (write)
  -- 
  -- 'weight_fold__instance_1__fixpt:77' if isempty(buf)
  -- 
  -- 'weight_fold__instance_1__fixpt:74' fm = get_fimath();
  -- 
  -- 'weight_fold__instance_1__fixpt:27' v3 = fi(ramwrap__instance_1_3_ (ndx, sample, bndx==fi(2, 0, 2, 0, fm)), 1, 
  -- 14, 0, fm)
  
  tmp_41 <= '1' WHEN bndx_1 = to_unsigned(16#2#, 3) ELSE
      '0';

  rd_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_42 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_42 <= tmp_41;
      END IF;
    END IF;
  END PROCESS rd_14_process;


  val_3 <= to_signed(16#0000#, 14);

  addr_4 <= to_signed(16#00001000#, 32);

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_trueregionp94
  tmp_43 <= signed(resize(tmp_2, 32));

  
  tmp_44 <= val_3 WHEN tmp_41 = '0' ELSE
      tmp_16;

  
  tmp_45 <= addr_4 WHEN tmp_41 = '0' ELSE
      tmp_43;

  indexLogic_fixptsig_4 <= unsigned(tmp_45(12 DOWNTO 0));

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_falseregionp90
  tmp_46 <= signed(resize(tmp_2, 32));

  addr_5 <= to_signed(16#00001000#, 32);

  buf_ram_wrenb_2 <= '1';

  
  tmp_47 <= tmp_46 WHEN tmp_41 = '0' ELSE
      addr_5;

  indexLogic_fixptsig_5 <= unsigned(tmp_47(12 DOWNTO 0));

  buf_signed_2 <= signed(buf_2);

  tmp_48 <= to_signed(16#0000#, 14);

  rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_49 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_49 <= tmp_48;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  
  tmp_50 <= buf_signed_2 WHEN tmp_42 = '0' ELSE
      tmp_49;

  
  tmp_51 <= tmp_50 WHEN tmp_42 = '0' ELSE
      sample;

  HwModeRegister_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_52 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_52 <= tmp_51;
      END IF;
    END IF;
  END PROCESS HwModeRegister_4_process;


  w3_signed <= signed(w3);

  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      w3_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        w3_1 <= w3_signed;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  HwModeRegister_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      w3_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        w3_2 <= w3_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_5_process;


  tmp_53 <= tmp_52 * w3_2;

  -- 'weight_fold__instance_1__fixpt:95' if (write)
  -- 
  -- 'weight_fold__instance_1__fixpt:92' if isempty(buf)
  -- 
  -- 'weight_fold__instance_1__fixpt:89' fm = get_fimath();
  -- 
  -- 'weight_fold__instance_1__fixpt:28' v4 = fi(ramwrap__instance_1_4_ (ndx, sample, bndx==fi(3, 0, 2, 0, fm)), 1, 
  -- 14, 0, fm)
  
  tmp_54 <= '1' WHEN bndx_1 = to_unsigned(16#3#, 3) ELSE
      '0';

  rd_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_55 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_55 <= tmp_54;
      END IF;
    END IF;
  END PROCESS rd_15_process;


  val_4 <= to_signed(16#0000#, 14);

  addr_6 <= to_signed(16#00001000#, 32);

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_trueregionp83
  tmp_56 <= signed(resize(tmp_2, 32));

  
  tmp_57 <= val_4 WHEN tmp_54 = '0' ELSE
      tmp_16;

  
  tmp_58 <= addr_6 WHEN tmp_54 = '0' ELSE
      tmp_56;

  indexLogic_fixptsig_6 <= unsigned(tmp_58(12 DOWNTO 0));

  -- HDL code generation from MATLAB function: weight_fold__instance_1__fixpt_falseregionp79
  tmp_59 <= signed(resize(tmp_2, 32));

  addr_7 <= to_signed(16#00001000#, 32);

  buf_ram_wrenb_3 <= '1';

  
  tmp_60 <= tmp_59 WHEN tmp_54 = '0' ELSE
      addr_7;

  indexLogic_fixptsig_7 <= unsigned(tmp_60(12 DOWNTO 0));

  buf_signed_3 <= signed(buf_3);

  -- 'weight_fold__instance_1__fixpt:53' else
  -- 
  -- 'weight_fold__instance_1__fixpt:54' val = fi(buf(ndx+fi(1, 0, 1, 0, fm)), 1, 14, 0, fm);
  -- 
  -- 'weight_fold__instance_1__fixpt:51' buf(ndx+fi(1, 0, 1, 0, fm)) = write_val;
  tmp_61 <= to_signed(16#0000#, 14);

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_62 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_62 <= tmp_61;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  
  tmp_63 <= buf_signed_3 WHEN tmp_55 = '0' ELSE
      tmp_62;

  
  tmp_64 <= tmp_63 WHEN tmp_55 = '0' ELSE
      sample;

  HwModeRegister_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_65 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_65 <= tmp_64;
      END IF;
    END IF;
  END PROCESS HwModeRegister_6_process;


  w4_signed <= signed(w4);

  rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      w4_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        w4_1 <= w4_signed;
      END IF;
    END IF;
  END PROCESS rd_6_process;


  HwModeRegister_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      w4_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        w4_2 <= w4_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_7_process;


  tmp_66 <= tmp_65 * w4_2;

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_67 <= to_signed(0, 46);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_67 <= tmp_27;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  tmp_68 <= resize(tmp_67, 47);

  PipelineRegister_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_69 <= to_signed(0, 46);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_69 <= tmp_40;
      END IF;
    END IF;
  END PROCESS PipelineRegister_1_process;


  tmp_70 <= resize(tmp_69, 47);

  tmp_71 <= tmp_68 + tmp_70;

  tmp_72 <= resize(tmp_71, 48);

  PipelineRegister_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_73 <= to_signed(0, 46);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_73 <= tmp_53;
      END IF;
    END IF;
  END PROCESS PipelineRegister_2_process;


  tmp_74 <= resize(tmp_73, 48);

  tmp_75 <= tmp_72 + tmp_74;

  tmp_76 <= resize(tmp_75, 49);

  PipelineRegister_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_77 <= to_signed(0, 46);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_77 <= tmp_66;
      END IF;
    END IF;
  END PROCESS PipelineRegister_3_process;


  tmp_78 <= resize(tmp_77, 49);

  tmp_79 <= tmp_76 + tmp_78;

  tmp_80 <= tmp_79(44 DOWNTO 13);

  valo <= std_logic_vector(tmp_80);

  ce_out <= clk_enable;

END rtl;

