-- -------------------------------------------------------------
-- 
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/spectrometer/hdlsrc/spectrometer_fixpt.vhd
-- Created: 2023-01-12 10:26:07
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- pks                           ce_out        1
-- outbin                        ce_out        1
-- ready                         ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: spectrometer_fixpt
-- Source Path: spectrometer_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.spectrometer_fixpt_pkg.ALL;

ENTITY spectrometer_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Navg                              :   IN   std_logic_vector(9 DOWNTO 0);  -- sfix14
        sample1                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        sample2                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        ce_out                            :   OUT   std_logic;
        pks                               :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- sfix32_E18 [4]
        outbin                            :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        ready                             :   OUT   std_logic
        );
END spectrometer_fixpt;


ARCHITECTURE rtl OF spectrometer_fixpt IS




  COMPONENT weight_streamer_fixpt 
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        w1                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w2                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w3                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w4                                :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En31
        );
  END COMPONENT;
 
 
 
COMPONENT weight_fold_instance_1_fixpt 
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        sample_1                          :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        w1                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w2                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w3                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w4                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        ce_out                            :   OUT   std_logic;
        valo                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En18
        );
  END COMPONENT;
 
 
 
 
 
COMPONENT  sfft_fixpt 
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        c_re                              :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
        c_im                              :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
        ce_out                            :   OUT   std_logic;
        fft_out_re                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        fft_out_im                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        fft_valid                         :   OUT   std_logic
        );
  END COMPONENT;
 
 
 
 
 
 
COMPONENT deinterlace_instance_12_fixpt 
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        fft_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        fft_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        fft_valid                         :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        ch1_val_re                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch1_val_im                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_re                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_im                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        bin                               :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        ready                             :   OUT   std_logic
        );
  END COMPONENT;
 
 
 
 
 
 
 
 
COMPONENT average_instance_P1_fixpt
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ch1_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch1_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        count                             :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
        ready_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        outpk                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_E17
        outbin                            :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        ready_out                         :   OUT   std_logic
        );
  END COMPONENT;
  
  COMPONENT average_instance_P2_fixpt
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ch1_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch1_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        count                             :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
        ready_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        outpk                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_E17
        outbin                            :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        ready_out                         :   OUT   std_logic
        );
  END COMPONENT;
  
  

  
 SIGNAL w1                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w2                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w3                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w4                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 
 SIGNAL w1_s1                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w2_s1                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w3_s1                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w4_s1                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31

 SIGNAL w1_s2                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w2_s2                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w3_s2                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w4_s2                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 
 SIGNAL w1_s3                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w2_s3                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w3_s3                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
 SIGNAL w4_s3                                :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
  
 
 SIGNAL val1                              :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL val2                              :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 
 SIGNAL val1_s1                              :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL val2_s1                              :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL val1_s2                              :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL val2_s2                              :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
  
 
 SIGNAL fft_val_r                       :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL fft_val_i                       :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL fft_valid                       :   std_logic;
 
 SIGNAL fft_val_r_s1                       :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL fft_val_i_s1                       :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL fft_valid_s1                       :   std_logic;
 
 SIGNAL fft_val_r_s2                       :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL fft_val_i_s2                       :   std_logic_vector(31 DOWNTO 0);  -- sfix32_En18
 SIGNAL fft_valid_s2                       :   std_logic;
 
 
 
 
  
 SIGNAL ch1_val_re                        :      std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
 SIGNAL ch1_val_im                        :      std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
 SIGNAL ch2_val_re                        :      std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
 SIGNAL ch2_val_im                        :      std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
 SIGNAL bin                               :      std_logic_vector(12 DOWNTO 0);  -- ufix13
 SIGNAL fft_ready                         :       std_logic;
  
 SIGNAL ch1_val_re_s1                        :      std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
 SIGNAL ch1_val_im_s1                        :      std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
 SIGNAL ch2_val_re_s1                        :      std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
 SIGNAL ch2_val_im_s1                        :      std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
 SIGNAL bin_s1                               :      std_logic_vector(12 DOWNTO 0);  -- ufix13
 SIGNAL fft_ready_s1                         :       std_logic;
  
  
 SIGNAL ce_out_s1                            :   std_logic;
 SIGNAL pks_s1                               :   vector_of_std_logic_vector32(0 TO 3);  -- sfix32_E18 [4]
 SIGNAL outbin_s1                            :   std_logic_vector(10 DOWNTO 0);  -- ufix11
 SIGNAL ready_s1                             :   std_logic;
 SIGNAL test0                               : signed(31 DOWNTO 0);
 SIGNAL test1                               : signed(32 DOWNTO 0);
 SIGNAL test2                               : signed(31 DOWNTO 0);
 
 
BEGIN
 

weight_streamer_fixpt_inst : weight_streamer_fixpt
  PORT map
        ( clk                => clk,
        reset                => reset,
        clk_enable           => clk_enable,
        ce_out               => open,
        w1                   => w1,
        w2                   => w2,
        w3                   => w3,
        w4                   => w4
        );

        
  process (clk) begin
    if (rising_edge(clk)) then
            w1_s1  <= w1;
            w2_s1  <= w2;
            w3_s1  <= w3;
            w4_s1  <= w4;
                
            w1_s2  <= w1_s1;
            w2_s2  <= w2_s1;
            w3_s2  <= w3_s1;
            w4_s2  <= w4_s1;
            w1_s3  <= w1_s1;
            w2_s3  <= w2_s1;
            w3_s3  <= w3_s1;
            w4_s3  <= w4_s1;
    end if;
end process; 

         
        
        
        
 
weight_fold_instance_1_fixpt_inst1  : weight_fold_instance_1_fixpt 
  PORT map
        ( clk                => clk,
        reset                => reset,
        clk_enable           => clk_enable,
        sample_1             => sample1,
        w1                   => w1_s2,
        w2                   => w2_s2,
        w3                   => w3_s2,
        w4                   => w4_s2,
        ce_out               => open,
        valo                 => val1
        );

 weight_fold_instance_1_fixpt_inst2  : weight_fold_instance_1_fixpt 
  PORT map
        ( clk                => clk,
        reset                => reset,
        clk_enable           => clk_enable,
        sample_1             => sample2,
        w1                   => w1_s3,
        w2                   => w2_s3,
        w3                   => w3_s3,
        w4                   => w4_s3,
        ce_out               => open,
        valo                 => val2
        );

  --  test0 <=  signed(val2_s1);
 --   test1 <=  - (resize(test0, 33));
    test2 <= - signed(val2_s1); --test1(31 downto 0);
        
      process (clk) begin
    if (rising_edge(clk)) then

    val1_s1    <= val1;
    val1_s2    <= val1_s1;
   
    val2_s1    <= val2;
    val2_s2    <= std_logic_vector(test2);
   
    end if;
end process;     
        
        

 
sfft_fixpt_inst : sfft_fixpt
  PORT map
        ( clk                => clk,
        reset                => reset,
        clk_enable           => clk_enable,
        c_re                 => val1_s2,
        c_im                 => val2_s2,
        ce_out               => open,
        fft_out_re           => fft_val_r,
        fft_out_im           => fft_val_i,
        fft_valid            => fft_valid
        );

      process (clk) begin
    if (rising_edge(clk)) then

        fft_val_r_s1  <= fft_val_r;
        fft_val_i_s1  <= fft_val_i; 
        fft_valid_s1  <=fft_valid;
        
        fft_val_r_s2  <= fft_val_r_s1;
        fft_val_i_s2  <= fft_val_i_s1; 
        fft_valid_s2  <=fft_valid_s1;
  
    end if;
end process;     
        


 
deinterlace_instance_12_fixpt_inst : deinterlace_instance_12_fixpt
  PORT map
        ( clk                => clk,
        reset                => reset,
        clk_enable           => clk_enable,
        fft_val_re           => fft_val_r_s2,
        fft_val_im           => fft_val_i_s2,
        fft_valid            => fft_valid_s2,
        ce_out               => open,
        ch1_val_re           => ch1_val_re,
        ch1_val_im           => ch1_val_im,
        ch2_val_re           => ch2_val_re,
        ch2_val_im           => ch2_val_im,
        bin                  => bin,
        ready                => fft_ready
        );

        
        
       process (clk) begin
    if (rising_edge(clk)) then

        ch1_val_re_s1           <= ch1_val_re;
        ch1_val_im_s1           <= ch1_val_im;
        ch2_val_re_s1           <= ch2_val_re;
        ch2_val_im_s1           <= ch2_val_im;
        bin_s1                  <= bin;
        fft_ready_s1            <= fft_ready;
    end if;
end process;     
        
  

        

 
 average_instance_P1_fixpt_inst : average_instance_P1_fixpt
  PORT map
        ( clk                => clk,
        reset                => reset,
        clk_enable           => clk_enable,
        ch1_val_re           => ch1_val_re_s1,
        ch1_val_im           => ch1_val_im_s1,
        ch2_val_re           => ch1_val_re_s1,
        ch2_val_im           => ch1_val_im_s1,
        count                => bin_s1,
        ready_in             => fft_ready_s1,
        ce_out               => ce_out_s1,
        outpk                => pks_s1(0),
        outbin               => outbin_s1,
        ready_out            => ready_s1
        );


   average_instance_P1_fixpt_inst2 : average_instance_P1_fixpt
  PORT map
        ( clk                => clk,
        reset                => reset,
        clk_enable           => clk_enable,
        ch1_val_re           => ch2_val_re,
        ch1_val_im           => ch2_val_im,
        ch2_val_re           => ch2_val_re,
        ch2_val_im           => ch2_val_im,
        count                => bin,
        ready_in             => fft_ready,
        ce_out               => open,
        outpk                => pks_s1(1),
        outbin               => open,
        ready_out            => open
        );

        
             process (clk) begin
    if (rising_edge(clk)) then

        ce_out               <= ce_out_s1;
        pks(0)               <= pks_s1(0);
        pks(1)               <= pks_s1(1);
        pks(2)               <= pks_s1(0);
        pks(3)               <= pks_s1(1);
        outbin               <= outbin_s1;
        ready                <= ready_s1;
    end if;
end process;     
          
 
END rtl;

