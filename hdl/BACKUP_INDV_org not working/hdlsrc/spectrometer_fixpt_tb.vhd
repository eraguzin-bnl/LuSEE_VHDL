-- -------------------------------------------------------------
-- 
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/spectrometer/hdlsrc/spectrometer_fixpt_tb.vhd
-- Created: 2023-01-12 10:26:34
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- pks                           ce_out        1
-- outbin                        ce_out        1
-- ready                         ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: spectrometer_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.spectrometer_fixpt_pkg.ALL;
USE work.spectrometer_fixpt_tb_pkg.ALL;

ENTITY spectrometer_fixpt_tb IS
END spectrometer_fixpt_tb;


ARCHITECTURE rtl OF spectrometer_fixpt_tb IS

  -- Component Declarations
  COMPONENT spectrometer_fixpt
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          sample1                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
          sample2                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
          ce_out                          :   OUT   std_logic;
          pks                             :   OUT   vector_of_std_logic_vector32(0 TO 3);  -- sfix32_E18 [4]
          outbin                          :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : spectrometer_fixpt
    USE ENTITY work.spectrometer_fixpt(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL ready_done                       : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL ready_done_enb                   : std_logic;  -- ufix1
  SIGNAL pks_addr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL ready_lastAddr                   : std_logic;  -- ufix1
  SIGNAL resetn                           : std_logic;
  SIGNAL check3_done                      : std_logic;  -- ufix1
  SIGNAL outbin_done                      : std_logic;  -- ufix1
  SIGNAL outbin_done_enb                  : std_logic;  -- ufix1
  SIGNAL outbin_lastAddr                  : std_logic;  -- ufix1
  SIGNAL check2_done                      : std_logic;  -- ufix1
  SIGNAL pks_done                         : std_logic;  -- ufix1
  SIGNAL pks_done_enb                     : std_logic;  -- ufix1
  SIGNAL pks_active                       : std_logic;  -- ufix1
  SIGNAL sample1_addr                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL sample2_addr_delay_1             : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL tb_enb                           : std_logic;
  SIGNAL rawData_sample2                  : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL holdData_sample2                 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL sample2_offset                   : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL sample2                          : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL sample2_1                        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL sample1_active                   : std_logic;  -- ufix1
  SIGNAL sample1_enb                      : std_logic;  -- ufix1
  SIGNAL sample1_addr_delay_1             : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rawData_sample1                  : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL holdData_sample1                 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL sample1_offset                   : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL sample1_1                        : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL sample1_2                        : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL snkDone                          : std_logic;
  SIGNAL snkDonen                         : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL pks                              : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL outbin                           : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL ready                            : std_logic;
  SIGNAL pks_enb                          : std_logic;  -- ufix1
  SIGNAL pks_lastAddr                     : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL pks_signed                       : vector_of_signed32(0 TO 3);  -- sfix32_E18 [4]
  SIGNAL pks_addr_delay_1                 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL pks_expected                     : vector_of_signed32(0 TO 3);  -- sfix32_E18 [4]
  SIGNAL pks_ref                          : vector_of_signed32(0 TO 3);  -- sfix32_E18 [4]
  SIGNAL pks_testFailure                  : std_logic;  -- ufix1
  SIGNAL outbin_unsigned                  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL outbin_addr_delay_1              : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL outbin_expected                  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL outbin_ref                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL outbin_testFailure               : std_logic;  -- ufix1
  SIGNAL ready_addr_delay_1               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL ready_expected                   : std_logic;
  SIGNAL ready_ref                        : std_logic;
  SIGNAL ready_testFailure                : std_logic;  -- ufix1
  SIGNAL testFailure                      : std_logic;  -- ufix1

BEGIN
  u_spectrometer_fixpt : spectrometer_fixpt
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => enb,
              sample1 => sample1_2,  -- sfix14
              sample2 => sample2_1,  -- sfix14
              ce_out => ce_out,
              pks => pks,  -- sfix32_E18 [4]
              outbin => outbin,  -- ufix11
              ready => ready
              );

  ready_done_enb <= ready_done AND rdEnb;

  
  ready_lastAddr <= '1' WHEN pks_addr >= to_unsigned(16#A02D#, 16) ELSE
      '0';

  ready_done <= ready_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_3_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check3_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ready_done_enb = '1' THEN
        check3_done <= ready_done;
      END IF;
    END IF;
  END PROCESS checkDone_3_process;

  outbin_done_enb <= outbin_done AND rdEnb;

  
  outbin_lastAddr <= '1' WHEN pks_addr >= to_unsigned(16#A02D#, 16) ELSE
      '0';

  outbin_done <= outbin_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check2_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF outbin_done_enb = '1' THEN
        check2_done <= outbin_done;
      END IF;
    END IF;
  END PROCESS checkDone_2_process;

  pks_done_enb <= pks_done AND rdEnb;

  
  pks_active <= '1' WHEN pks_addr /= to_unsigned(16#A02D#, 16) ELSE
      '0';

  sample2_addr_delay_1 <= sample1_addr AFTER 1 ns;

  -- Data source for sample2
  sample2_fileread: PROCESS (sample2_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "sample2.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_sample2 <= signed(read_data(13 DOWNTO 0));
  END PROCESS sample2_fileread;

  -- holdData reg for sample2
  stimuli_sample2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_sample2 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_sample2 <= rawData_sample2;
    END IF;
  END PROCESS stimuli_sample2_process;

  stimuli_sample2_1: PROCESS (rawData_sample2, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      sample2_offset <= holdData_sample2;
    ELSE
      sample2_offset <= rawData_sample2;
    END IF;
  END PROCESS stimuli_sample2_1;

  sample2 <= sample2_offset AFTER 2 ns;

  sample2_1 <= std_logic_vector(sample2);

  
  sample1_active <= '1' WHEN sample1_addr /= to_unsigned(16#A02D#, 16) ELSE
      '0';

  sample1_enb <= sample1_active AND (rdEnb AND tb_enb);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 41005
  sample1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sample1_addr <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF sample1_enb = '1' THEN
        IF sample1_addr >= to_unsigned(16#A02D#, 16) THEN 
          sample1_addr <= to_unsigned(16#0000#, 16);
        ELSE 
          sample1_addr <= sample1_addr + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS sample1_process;


  sample1_addr_delay_1 <= sample1_addr AFTER 1 ns;

  -- Data source for sample1
  sample1_fileread: PROCESS (sample1_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "sample1.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_sample1 <= signed(read_data(13 DOWNTO 0));
  END PROCESS sample1_fileread;

  -- holdData reg for sample1
  stimuli_sample1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_sample1 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_sample1 <= rawData_sample1;
    END IF;
  END PROCESS stimuli_sample1_process;

  stimuli_sample1_1: PROCESS (rawData_sample1, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      sample1_offset <= holdData_sample1;
    ELSE
      sample1_offset <= rawData_sample1;
    END IF;
  END PROCESS stimuli_sample1_1;

  sample1_1 <= sample1_offset AFTER 2 ns;

  sample1_2 <= std_logic_vector(sample1_1);

  snkDonen <=  NOT snkDone;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN snkDone = '0' ELSE
      '0';

  enb <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  pks_enb <= ce_out AND pks_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 41005
  pks_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pks_addr <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF pks_enb = '1' THEN
        IF pks_addr >= to_unsigned(16#A02D#, 16) THEN 
          pks_addr <= to_unsigned(16#0000#, 16);
        ELSE 
          pks_addr <= pks_addr + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS pks_1_process;


  
  pks_lastAddr <= '1' WHEN pks_addr >= to_unsigned(16#A02D#, 16) ELSE
      '0';

  pks_done <= pks_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF pks_done_enb = '1' THEN
        check1_done <= pks_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  snkDone <= check3_done AND (check1_done AND check2_done);

  outputgen: FOR k IN 0 TO 3 GENERATE
    pks_signed(k) <= signed(pks(k));
  END GENERATE;

  pks_addr_delay_1 <= pks_addr AFTER 1 ns;

  -- Data source for pks_expected
  pks_expected_fileread: PROCESS (pks_addr_delay_1, tb_enb, ce_out)
    FILE fp: TEXT open READ_MODE is "pks_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: vector_of_std_logic_vector32(0 TO 3);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data(0));
      HREAD(l, read_data(1));
      HREAD(l, read_data(2));
      HREAD(l, read_data(3));
    END IF;
    pks_expected <= (signed(read_data(0)(31 DOWNTO 0)), signed(read_data(1)(31 DOWNTO 0)), signed(read_data(2)(31 DOWNTO 0)), signed(read_data(3)(31 DOWNTO 0)));
  END PROCESS pks_expected_fileread;

  pks_ref <= pks_expected;

  pks_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pks_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND pks_signed /= pks_ref THEN
        pks_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in pks_signed: Expected " & to_hex(pks_ref) & (" Actual " & to_hex(pks_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS pks_signed_checker;

  outbin_unsigned <= unsigned(outbin);

  outbin_addr_delay_1 <= pks_addr AFTER 1 ns;

  -- Data source for outbin_expected
  outbin_expected_fileread: PROCESS (outbin_addr_delay_1, tb_enb, ce_out)
    FILE fp: TEXT open READ_MODE is "outbin_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(11 DOWNTO 0);

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    outbin_expected <= unsigned(read_data(10 DOWNTO 0));
  END PROCESS outbin_expected_fileread;

  outbin_ref <= outbin_expected;

  outbin_unsigned_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      outbin_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND outbin_unsigned /= outbin_ref THEN
        outbin_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in outbin_unsigned: Expected " & to_hex(outbin_ref) & (" Actual " & to_hex(outbin_unsigned))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS outbin_unsigned_checker;

  ready_addr_delay_1 <= pks_addr AFTER 1 ns;

  -- Data source for ready_expected
  ready_expected_fileread: PROCESS (ready_addr_delay_1, tb_enb, ce_out)
    FILE fp: TEXT open READ_MODE is "ready_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    ready_expected <= read_data;
  END PROCESS ready_expected_fileread;

  ready_ref <= ready_expected;

  ready_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ready_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND ready /= ready_ref THEN
        ready_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in ready: Expected " & to_hex(ready_ref) & (" Actual " & to_hex(ready))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS ready_checker;

  testFailure <= ready_testFailure OR (pks_testFailure OR outbin_testFailure);

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF snkDone = '1' THEN
        IF testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

