-- -------------------------------------------------------------
-- 
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/weight_fold_instance_1/hdlsrc/weight_fold_instance_1_fixpt.vhd
-- Created: 2023-01-31 11:30:30
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- val_out                       ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: weight_fold_instance_1_fixpt
-- Source Path: weight_fold_instance_1_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.spectrometer_fixpt_pkg.ALL;

ENTITY weight_fold_instance_1_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        sample_1                          :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14
        w1                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w2                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w3                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        w4                                :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En31
        ce_out                            :   OUT   std_logic;
        val_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En18
        );
END weight_fold_instance_1_fixpt;


ARCHITECTURE rtl OF weight_fold_instance_1_fixpt IS

  -- Component Declarations
  component PF_TPSRAM_WEIGHT_FOLD
    PORT ( 
        CLK                               :   IN    std_logic;
        R_ADDR                            :   IN    std_logic_vector(11 downto 0);
        W_EN                              :   IN    std_logic;
        W_ADDR                            :   IN    std_logic_vector(11 downto 0);
        W_DATA                            :   IN    signed(13 downto 0);
        R_DATA                            :   OUT   signed(13 downto 0)
        );
    end component;
    
    -- Signals
    signal write_en                       : std_logic_vector(3 downto 0);
    signal write_data                     : signed(13 downto 0);
    signal write_address                  : std_logic_vector(11 downto 0);
    signal read_data                      : vector_of_signed14(3 downto 0);
    signal read_data_s1                   : vector_of_signed14(3 downto 0);
    
    signal ndx                            : integer range 0 to 4095;
    signal bndx                           : integer range 0 to 3;
    
    signal read_counter                   : integer range 0 to 4095;
    signal weights_s1                     : vector_of_std_logic_vector32(3 downto 0);
    
    signal weight_fold_raw                : vector_of_std_logic_vector46(3 downto 0);
    signal weight_fold_trim               : vector_of_signed34(3 downto 0);
    signal val_full                       : signed(33 downto 0);
    signal val_trim                       : std_logic_vector(31 downto 0);
    signal valid_in                       : std_logic_vector(3 downto 0);
    signal valid_out                      : std_logic_vector(3 downto 0);
    signal block_valid_s1                 : std_logic;
    signal block_valid_s2                 : std_logic;
    signal block_valid_s3                 : std_logic;
    
    BEGIN
    
    generate_ram: for ii in 0 to 3 generate
        RAM : PF_TPSRAM_WEIGHT_FOLD
        PORT MAP( 
            CLK => clk,
            R_ADDR => std_logic_vector(to_unsigned(read_counter, write_address'length)),
            W_EN => write_en(ii),
            W_ADDR => write_address,
            W_DATA => write_data,
            R_DATA => read_data(ii)
        );
    end generate generate_ram;
    
    generate_mult: for ii in 0 to 3 generate
        mult : entity work.Multiply_generic17
        generic map(
            size => 14)
        port map(
            -- Inputs
            i_clk => clk,
            i_rstb => reset,
            i_ma => std_logic_vector(read_data_s1(ii)),
            i_mb => weights_s1(ii),

            --Valid
            valid_in => valid_in(ii),
            valid_out => valid_out(ii),

            -- Outputs
            o_m => weight_fold_raw(ii)
        );
    end generate generate_mult;

    process (clk)
    begin
    if (rising_edge(clk)) then
        if (reset = '1') then
            ndx <= 0;
            bndx <= 0;
            read_counter <= 2;
            write_en <= "0000";
            write_address <= (others=>'0');
            write_data <= (others=>'0');
            --read_data <= (others=>(others=>'0'));
            read_data_s1 <= (others=>(others=>'0'));
            weights_s1 <= (others=>(others=>'0'));
            --weight_fold_raw <= (others=>(others=>'0'));
            --weight_fold_trim <= (others=>(others=>'0'));
            valid_in <= (others=>'0');
            block_valid_s1 <= '0';
            block_valid_s2 <= '0';
            block_valid_s3 <= '0';
            val_full <= (others=>'0');
        else
            valid_in <= (others=>'1');
            if (ndx = 4095) then
                ndx <= 0;
                if (bndx = 3) then
                    bndx <= 0;
                else
                    bndx <= bndx + 1;
                end if;
            else
                ndx <= ndx + 1;
            end if;
            
            if (read_counter = 4095) then
                read_counter <= 0;
            else
                read_counter <= read_counter + 1;
            end if;
            weights_s1(0) <= w1;
            weights_s1(1) <= w2;
            weights_s1(2) <= w3;
            weights_s1(3) <= w4;
            
            write_data <= signed(sample_1);
            write_address <= std_logic_vector(to_unsigned(ndx, write_address'length));
            
            read_data_s1 <= read_data;
            case bndx is
                when 0 =>
                    write_en <= "0001";
                    read_data_s1(0) <= signed(sample_1);
                when 1 =>
                    write_en <= "0010";
                    read_data_s1(1) <= signed(sample_1);
                when 2 =>
                    write_en <= "0100";
                    read_data_s1(2) <= signed(sample_1);
                when 3 =>
                    write_en <= "1000";
                    read_data_s1(3) <= signed(sample_1);
                when others =>		
                    write_en <= "0000";	
                    read_data_s1(0) <= signed(sample_1); 
            end case;
            
            block_valid_s2 <= block_valid_s1;
            block_valid_s3 <= block_valid_s2;
            ce_out <= block_valid_s3;
            if (valid_out = "1111") then
                block_valid_s1 <= '1';
                weight_fold_trim(0) <= resize(signed(weight_fold_raw(0)), 34);
                weight_fold_trim(1) <= resize(signed(weight_fold_raw(1)), 34);
                weight_fold_trim(2) <= resize(signed(weight_fold_raw(2)), 34);
                weight_fold_trim(3) <= resize(signed(weight_fold_raw(3)), 34);
                val_full <= weight_fold_trim(3) + weight_fold_trim(2) + weight_fold_trim(1) + weight_fold_trim(0);
                val_out <= std_logic_vector(resize(val_full, 32));
            else
                block_valid_s1 <= '0';
            end if;
        
        end if;
    end if;
    end process;
END rtl;

