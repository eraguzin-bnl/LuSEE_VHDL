-- -------------------------------------------------------------
--
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/sfft/hdlsrc/Complex4Multiply.vhd
-- Created: 2023-02-06 14:23:13
--
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
--
--
-- -------------------------------------------------------------


-- -------------------------------------------------------------
--
-- Module: Complex4Multiply
-- Source Path: sfft_fixpt/dsphdl.FFT/RADIX22FFT_SDF1_3/Complex4Multiply
-- Hierarchy Level: 3
--
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Complex4Multiply_generic IS
    generic(
      size : integer := 34
      );
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_re                            :   IN    std_logic_vector(size DOWNTO 0);  -- sfix35_En18
        din_im                            :   IN    std_logic_vector(size DOWNTO 0);  -- sfix35_En18
        vld_in                            :   IN    std_logic;
        twdl_re                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        twdl_im                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        softReset                         :   IN    std_logic;
        dinXTwdl_re                       :   OUT   std_logic_vector(size DOWNTO 0);  -- sfix35_En18
        dinXTwdl_im                       :   OUT   std_logic_vector(size DOWNTO 0);  -- sfix35_En18
        vld_out                           :   OUT   std_logic
        );
END Complex4Multiply_generic;


ARCHITECTURE rtl OF Complex4Multiply_generic IS

  -- Signals
  SIGNAL din_re_signed                    : signed(size DOWNTO 0);  -- sfix35_En18
  SIGNAL din_re_reg                       : signed(size DOWNTO 0);  -- sfix35_En18
  SIGNAL din_im_signed                    : signed(size DOWNTO 0);  -- sfix35_En18
  SIGNAL din_im_reg                       : signed(size DOWNTO 0);  -- sfix35_En18
  SIGNAL twdl_re_signed                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_re_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_im_signed                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL twdl_im_reg                      : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(size DOWNTO 0);  -- sfix35
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(size DOWNTO 0);  -- sfix35
  SIGNAL Complex4Multiply_mult1_re_pipe1  : std_logic_vector(size + 32 DOWNTO 0);  -- sfix67
  SIGNAL Complex4Multiply_mult2_re_pipe1  : std_logic_vector(size + 32  DOWNTO 0);  -- sfix67
  SIGNAL Complex4Multiply_mult1_im_pipe1  : std_logic_vector(size + 32  DOWNTO 0);  -- sfix67
  SIGNAL Complex4Multiply_mult2_im_pipe1  : std_logic_vector(size + 32  DOWNTO 0);  -- sfix67
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL prod1_re                         : signed(size + 32  DOWNTO 0);  -- sfix67_En48
  SIGNAL prod1_im                         : signed(size + 32  DOWNTO 0);  -- sfix67_En48
  SIGNAL prod2_re                         : signed(size + 32  DOWNTO 0);  -- sfix67_En48
  SIGNAL prod2_im                         : signed(size + 32  DOWNTO 0);  -- sfix67_En48
  SIGNAL Complex4Add_multRes_re_reg       : signed(size + 32 + 1 DOWNTO 0);  -- sfix68
  SIGNAL Complex4Add_multRes_im_reg       : signed(size + 32 + 1 DOWNTO 0);  -- sfix68
  SIGNAL Complex4Add_prod1_re_reg         : signed(size + 32  DOWNTO 0);  -- sfix67
  SIGNAL Complex4Add_prod1_im_reg         : signed(size + 32  DOWNTO 0);  -- sfix67
  SIGNAL Complex4Add_prod2_re_reg         : signed(size + 32  DOWNTO 0);  -- sfix67
  SIGNAL Complex4Add_prod2_im_reg         : signed(size + 32  DOWNTO 0);  -- sfix67
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(size + 32 + 1 DOWNTO 0);  -- sfix68_En48
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(size + 32 + 1 DOWNTO 0);  -- sfix68_En48
  SIGNAL Complex4Add_sub_cast             : signed(size + 32 + 1 DOWNTO 0);  -- sfix68_En48
  SIGNAL Complex4Add_sub_cast_1           : signed(size + 32 + 1 DOWNTO 0);  -- sfix68_En48
  SIGNAL Complex4Add_add_cast             : signed(size + 32 + 1 DOWNTO 0);  -- sfix68_En48
  SIGNAL Complex4Add_add_cast_1           : signed(size + 32 + 1 DOWNTO 0);  -- sfix68_En48
  SIGNAL mulResFP_re                      : signed(size + 32 + 1 DOWNTO 0);  -- sfix68_En48
  SIGNAL mulResFP_im                      : signed(size + 32 + 1 DOWNTO 0);  -- sfix68_En48
  SIGNAL dinXTwdl_re_tmp                  : signed(size DOWNTO 0);  -- sfix35_En18
  SIGNAL dinXTwdl_im_tmp                  : signed(size DOWNTO 0);  -- sfix35_En18
  signal vld_in_s1                        : std_logic;
  signal vld_in_s2                        : std_logic;
  signal valid_out                        : std_logic;
  signal vld_out_s1                       : std_logic;
  signal vld_out_s2                       : std_logic;
  signal vld_out_s3                       : std_logic;

BEGIN
  din_re_signed <= signed(din_re);

  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg <= to_signed(0, size + 1);
    ELSIF clk'EVENT AND clk = '1' THEN
   --   IF enb = '1' THEN
        din_re_reg <= din_re_signed;
  --    END IF;
    END IF;
  END PROCESS intdelay_process;


  din_im_signed <= signed(din_im);

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg <= to_signed(0, size + 1);
    ELSIF clk'EVENT AND clk = '1' THEN
   --   IF enb = '1' THEN
        din_im_reg <= din_im_signed;
  --    END IF;
    END IF;
  END PROCESS intdelay_1_process;


  twdl_re_signed <= signed(twdl_re);

  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      twdl_re_reg <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
  --    IF enb = '1' THEN
        twdl_re_reg <= twdl_re_signed;
   --   END IF;
    END IF;
  END PROCESS intdelay_2_process;


  twdl_im_signed <= signed(twdl_im);

  intdelay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      twdl_im_reg <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
   --   IF enb = '1' THEN
        twdl_im_reg <= twdl_im_signed;
  --    END IF;
    END IF;
  END PROCESS intdelay_3_process;
-- Eric Raguzin
-- Added custom pipelined multiplier blocks to replace multiplication below
    mult_top_re_re : entity work.Multiply_generic(rtl)
        generic map(
            a_size => size)
        -- port map
        port map(
            -- Inputs
            i_clk => clk,
            i_rstb => reset,
            i_ma => std_logic_vector(Complex4Multiply_din1_re_pipe1),
            i_mb => std_logic_vector(Complex4Multiply_twiddle_re_pipe1),

            --Valid
            valid_in => vld_in_s2,
            valid_out => valid_out,

            -- Outputs
            o_m => Complex4Multiply_mult1_re_pipe1
    );

    mult_top_im_im : entity work.Multiply_generic
        generic map(
            a_size => size)
        -- port map
        port map(
            -- Inputs
            i_clk => clk,
            i_rstb => reset,
            i_ma => std_logic_vector(Complex4Multiply_din1_im_pipe1),
            i_mb => std_logic_vector(Complex4Multiply_twiddle_im_pipe1),

            --Valid
            valid_in => vld_in_s2,
            valid_out => open,

            -- Outputs
            o_m => Complex4Multiply_mult2_re_pipe1
    );

    mult_top_re_im : entity work.Multiply_generic
        generic map(
            a_size => size)
        -- port map
        port map(
            -- Inputs
            i_clk => clk,
            i_rstb => reset,
            i_ma => std_logic_vector(Complex4Multiply_din1_re_pipe1),
            i_mb => std_logic_vector(Complex4Multiply_twiddle_im_pipe1),

            --Valid
            valid_in => vld_in_s2,
            valid_out => open,

            -- Outputs
            o_m => Complex4Multiply_mult1_im_pipe1
    );

    mult_top_im_re : entity work.Multiply_generic
        generic map(
            a_size => size)
        -- port map
        port map(
            -- Inputs
            i_clk => clk,
            i_rstb => reset,
            i_ma => std_logic_vector(Complex4Multiply_din1_im_pipe1),
            i_mb => std_logic_vector(Complex4Multiply_twiddle_re_pipe1),

            --Valid
            valid_in => vld_in_s2,
            valid_out => open,

            -- Outputs
            o_m => Complex4Multiply_mult2_im_pipe1
    );

  -- Complex4Multiply
  Complex4Multiply_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
   --   IF enb = '1' THEN
        prod1_re <= signed(Complex4Multiply_mult1_re_pipe1);
        prod2_re <= signed(Complex4Multiply_mult2_re_pipe1);
        prod1_im <= signed(Complex4Multiply_mult1_im_pipe1);
        prod2_im <= signed(Complex4Multiply_mult2_im_pipe1);
        --Muliplication replaced by custom blocks above
        --Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        --Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        --Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        --Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
   --   END IF;
    END IF;
  END PROCESS Complex4Multiply_1_process;

  --Takes into account all the registering of the inputs before it gets to the custom generic block
    vld_in_dly : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vld_in_s1 <= '0';
      vld_in_s2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
  --    IF enb = '1' THEN
        vld_in_s1 <= vld_in;
        vld_in_s2 <= vld_in_s1;
   --   END IF;
    END IF;
  END PROCESS vld_in_dly;

    --Takes into account all the registering of the outputs (in the complex4Add process)
    -- before it gets to the output
    vld_out_dly : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vld_out_s1 <= '0';
      vld_out_s2 <= '0';
      vld_out_s3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
  --    IF enb = '1' THEN
        vld_out_s1 <= valid_out;
        vld_out_s2 <= vld_out_s1;
        vld_out_s3 <= vld_out_s2;
   --   END IF;
    END IF;
  END PROCESS vld_out_dly;

  vld_out <= vld_out_s3;


  -- Complex4Add
  Complex4Add_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Complex4Add_multRes_re_reg <= to_signed(0, size + 32 + 2);
      Complex4Add_multRes_im_reg <= to_signed(0, size + 32 + 2);
      Complex4Add_prod1_re_reg <= to_signed(0, size + 32 + 1);
      Complex4Add_prod1_im_reg <= to_signed(0, size + 32 + 1);
      Complex4Add_prod2_re_reg <= to_signed(0, size + 32 + 1);
      Complex4Add_prod2_im_reg <= to_signed(0, size + 32 + 1);
    ELSIF clk'EVENT AND clk = '1' THEN
  --    IF enb = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
   --   END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_sub_cast <= resize(Complex4Add_prod1_re_reg, size + 32 + 2);
  Complex4Add_sub_cast_1 <= resize(Complex4Add_prod2_re_reg, size + 32 + 2);
  Complex4Add_multRes_re_reg_next <= Complex4Add_sub_cast - Complex4Add_sub_cast_1;
  Complex4Add_add_cast <= resize(Complex4Add_prod1_im_reg, size + 32 + 2);
  Complex4Add_add_cast_1 <= resize(Complex4Add_prod2_im_reg, size + 32 + 2);
  Complex4Add_multRes_im_reg_next <= Complex4Add_add_cast + Complex4Add_add_cast_1;
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re_tmp <= mulResFP_re(size + 32 - 2 DOWNTO 30);

  dinXTwdl_re <= std_logic_vector(dinXTwdl_re_tmp);

  dinXTwdl_im_tmp <= mulResFP_im(size + 32 - 2 DOWNTO 30);

  dinXTwdl_im <= std_logic_vector(dinXTwdl_im_tmp);

END rtl;