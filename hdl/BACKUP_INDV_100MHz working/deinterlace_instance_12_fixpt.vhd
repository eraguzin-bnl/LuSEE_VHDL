-- -------------------------------------------------------------
-- 
-- File Name: /u/home/eraguzin/matlab/LNspec/matlab/codegen/deinterlace__instance_12_/hdlsrc/deinterlace_instance_12_fixpt.vhd
-- Created: 2023-01-19 10:46:12
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ch1_val_re                    ce_out        1
-- ch1_val_im                    ce_out        1
-- ch2_val_re                    ce_out        1
-- ch2_val_im                    ce_out        1
-- bin                           ce_out        1
-- ready                         ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: deinterlace_instance_12_fixpt
-- Source Path: deinterlace__instance_12__fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY deinterlace_instance_12_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        fft_val_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        fft_val_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        fft_valid                         :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        ch1_val_re                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch1_val_im                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_re                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        ch2_val_im                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En7
        bin                               :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        ready                             :   OUT   std_logic
        );
END deinterlace_instance_12_fixpt;


ARCHITECTURE rtl OF deinterlace_instance_12_fixpt IS

  -- Component Declarations
  COMPONENT SimpleDualPortRAM_generic_block
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din_re                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_din_im                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout_re                      :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          rd_dout_im                      :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SimpleDualPortRAM_generic_block
    USE ENTITY work.SimpleDualPortRAM_generic_block(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL count_out                        : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count                            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp                              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_3                            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_4                            : std_logic;
  SIGNAL tmp_5                            : std_logic;
  SIGNAL fft_val_b_re                     : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_b_im                     : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_b_re_1                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_b_im_1                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_re                           : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im                           : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_re_1                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im_1                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_re_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_im_signed                : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL val_re                           : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL val_im                           : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_re_2                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im_2                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_6                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL addr                             : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_7                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL addr_1                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL bin_1                            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL tmp_8                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL buf_ram_wrenb                    : std_logic;  -- ufix1
  SIGNAL tmp_9                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL buf_re                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL buf_im                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL buf_re_signed                    : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL buf_im_signed                    : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_re_3                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im_3                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_re_4                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im_4                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_re_5                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL tmp_im_5                         : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_re_1                     : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL fft_val_im_1                     : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL c_re                             : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL c_im                             : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p26c_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p26c_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p26c_add_cast_2                  : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p26c_cast                        : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p26c_cast_1                      : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p26c_add_cast_3                  : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL p26c_add_cast_4                  : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL br                               : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL cr                               : signed(64 DOWNTO 0);  -- sfix65_En39
  SIGNAL p29cr_cast                       : signed(65 DOWNTO 0);  -- sfix66_En39
  SIGNAL bi                               : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL ci                               : signed(64 DOWNTO 0);  -- sfix65_En39
  SIGNAL p30ci_cast                       : signed(65 DOWNTO 0);  -- sfix66_En39
  SIGNAL ch1_val_re_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch1_val_im_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL c_re_1                           : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL c_im_1                           : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p32c_sub_cast                    : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p32c_sub_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p32c_sub_cast_2                  : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p32c_cast                        : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p32c_cast_1                      : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL p32c_sub_cast_3                  : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL p32c_sub_cast_4                  : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL br_1                             : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL bi_1                             : signed(32 DOWNTO 0);  -- sfix33_En7
  SIGNAL pr1                              : signed(66 DOWNTO 0);  -- sfix67_En39
  SIGNAL pr1in                            : signed(67 DOWNTO 0);  -- sfix68_En39
  SIGNAL pr2                              : signed(66 DOWNTO 0);  -- sfix67_En39
  SIGNAL pr2in                            : signed(67 DOWNTO 0);  -- sfix68_En39
  SIGNAL pre                              : signed(67 DOWNTO 0);  -- sfix68_En39
  SIGNAL pi1                              : signed(66 DOWNTO 0);  -- sfix67_En39
  SIGNAL pi1in                            : signed(67 DOWNTO 0);  -- sfix68_En39
  SIGNAL pi2                              : signed(66 DOWNTO 0);  -- sfix67_En39
  SIGNAL pi2in                            : signed(67 DOWNTO 0);  -- sfix68_En39
  SIGNAL pim                              : signed(67 DOWNTO 0);  -- sfix68_En39
  SIGNAL ch2_val_re_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL ch2_val_im_tmp                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL bin_tmp                          : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL ready_1                          : std_logic;

BEGIN
  u_buf_ram_generic : SimpleDualPortRAM_generic_block 
    GENERIC MAP( AddrWidth => 12,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din_re => std_logic_vector(tmp_re_2),
              wr_din_im => std_logic_vector(tmp_im_2),
              wr_addr => std_logic_vector(indexLogic_fixptsig),
              wr_en => buf_ram_wrenb,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_1),
              rd_dout_re => buf_re,
              rd_dout_im => buf_im
              );

  count_out <= to_unsigned(16#000#, 12);

  enb <= clk_enable;

  -- 'deinterlace__instance_12__fixpt:38' count_out = fi(int16(0), 0, 12, 0, fm);
  -- 
  -- HDL code generation from MATLAB function: deinterlace__instance_12__fixpt
  tmp <= count + to_unsigned(16#001#, 12);

  
  tmp_1 <= '1' WHEN count = to_unsigned(16#FFF#, 12) ELSE
      '0';

  
  tmp_2 <= tmp WHEN tmp_1 = '0' ELSE
      count_out;

  -- 'deinterlace__instance_12__fixpt:29' if fft_valid
  
  tmp_3 <= count WHEN fft_valid = '0' ELSE
      tmp_2;

  count_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count <= tmp_3;
      END IF;
    END IF;
  END PROCESS count_reg_process;


  -- 'deinterlace__instance_12__fixpt:19' if (count>fi(2048, 0, 12, 0, fm))
  
  tmp_4 <= '1' WHEN count > to_unsigned(16#800#, 12) ELSE
      '0';

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_5 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_5 <= tmp_4;
      END IF;
    END IF;
  END PROCESS reduced_process;


  -- HDL code generation from MATLAB function: deinterlace__instance_12__fixpt
  fft_val_b_re <= to_signed(0, 32);
  fft_val_b_im <= to_signed(0, 32);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fft_val_b_re_1 <= to_signed(0, 32);
      fft_val_b_im_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fft_val_b_re_1 <= fft_val_b_re;
        fft_val_b_im_1 <= fft_val_b_im;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  -- 'deinterlace__instance_12__fixpt:20' fft_val_b = fi(buf(bin+fi(1, 0, 1, 0, fm)), 1, 32, 7, fm);
  -- 
  -- 'deinterlace__instance_12__fixpt:21' else
  -- 
  -- 'deinterlace__instance_12__fixpt:22' fft_val_b = fi(complex(0,0), 1, 32, 7, fm);
  -- 
  -- 'deinterlace__instance_12__fixpt:23' buf(count+fi(1, 0, 1, 0, fm)) = fft_val;
  tmp_re <= to_signed(0, 32);
  tmp_im <= to_signed(0, 32);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_re_1 <= to_signed(0, 32);
      tmp_im_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_re_1 <= tmp_re;
        tmp_im_1 <= tmp_im;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  -- HDL code generation from MATLAB function: deinterlace__instance_12__fixpt_falseregionp3
  fft_val_re_signed <= signed(fft_val_re);

  fft_val_im_signed <= signed(fft_val_im);

  val_re <= to_signed(0, 32);
  val_im <= to_signed(0, 32);

  
  tmp_re_2 <= fft_val_re_signed WHEN tmp_4 = '0' ELSE
      val_re;
  
  tmp_im_2 <= fft_val_im_signed WHEN tmp_4 = '0' ELSE
      val_im;

  -- 'deinterlace__instance_12__fixpt:30' count(:) = count_up__instance_12_(count);
  -- 
  -- 'deinterlace__instance_12__fixpt:35' fm = get_fimath();
  -- 
  -- 'deinterlace__instance_12__fixpt:37' if (count_in== fi(4096-1, 0, 12, 0, fm))
  -- 
  -- 'deinterlace__instance_12__fixpt:39' else
  -- 
  -- 'deinterlace__instance_12__fixpt:40' count_out = fi(count_in + fi(1, 0, 1, 0, fm), 0, 12, 0, fm);
  -- 
  -- HDL code generation from MATLAB function: deinterlace__instance_12__fixpt_falseregionp5
  tmp_6 <= signed(resize(count, 32));

  addr <= to_signed(16#00000801#, 32);

  
  tmp_7 <= tmp_6 WHEN tmp_4 = '0' ELSE
      addr;

  indexLogic_fixptsig <= unsigned(tmp_7(11 DOWNTO 0));

  addr_1 <= to_signed(16#00000801#, 32);

  -- 'deinterlace__instance_12__fixpt:18' bin = fi(int16(fi(4096, 0, 13, 0, fm)-count), 0, 13, 0, fm);
  bin_1 <= resize(to_unsigned(16#1000#, 14) - resize(count, 14), 13);

  -- HDL code generation from MATLAB function: deinterlace__instance_12__fixpt_trueregionp12
  tmp_8 <= signed(resize(bin_1, 32));

  buf_ram_wrenb <= '1';

  
  tmp_9 <= addr_1 WHEN tmp_4 = '0' ELSE
      tmp_8;

  indexLogic_fixptsig_1 <= unsigned(tmp_9(11 DOWNTO 0));

  buf_re_signed <= signed(buf_re);

  buf_im_signed <= signed(buf_im);

  
  tmp_re_3 <= tmp_re_1 WHEN tmp_5 = '0' ELSE
      buf_re_signed;
  
  tmp_im_3 <= tmp_im_1 WHEN tmp_5 = '0' ELSE
      buf_im_signed;

  tmp_re_4 <= tmp_re_3;
  tmp_im_4 <= tmp_im_3;

  
  tmp_re_5 <= fft_val_b_re_1 WHEN tmp_5 = '0' ELSE
      tmp_re_4;
  
  tmp_im_5 <= fft_val_b_im_1 WHEN tmp_5 = '0' ELSE
      tmp_im_4;

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fft_val_re_1 <= to_signed(0, 32);
      fft_val_im_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fft_val_re_1 <= fft_val_re_signed;
        fft_val_im_1 <= fft_val_im_signed;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  -- 'deinterlace__instance_12__fixpt:26' ch1_val = fi(fi(0.5, 0, 32, 32, fm)*(fft_val_b+conj(fft_val)), 1, 32, 7, fm);
  p26c_add_cast <= resize(tmp_re_5, 33);
  p26c_add_cast_1 <= resize(fft_val_re_1, 33);
  c_re <= p26c_add_cast + p26c_add_cast_1;
  p26c_add_cast_2 <= resize(tmp_im_5, 33);
  p26c_cast <= resize(fft_val_im_1, 33);
  p26c_cast_1 <=  - (p26c_cast);
  p26c_add_cast_3 <= p26c_cast_1(31 DOWNTO 0);
  p26c_add_cast_4 <= resize(p26c_add_cast_3, 33);
  c_im <= p26c_add_cast_2 + p26c_add_cast_4;

  br <= c_re;

  p29cr_cast <= resize(br & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66);
  cr <= p29cr_cast(64 DOWNTO 0);

  bi <= c_im;

  p30ci_cast <= resize(bi & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 66);
  ci <= p30ci_cast(64 DOWNTO 0);

  ch1_val_re_tmp <= cr(63 DOWNTO 32);
  ch1_val_im_tmp <= ci(63 DOWNTO 32);

  ch1_val_re <= std_logic_vector(ch1_val_re_tmp);

  ch1_val_im <= std_logic_vector(ch1_val_im_tmp);

  -- 'deinterlace__instance_12__fixpt:27' ch2_val = fi(complexx(fi(0, 0, 1, 0, fm),fi_uminus(fi(0.5, 0, 32, 32, fm)))*(fft_val_b-conj(fft_val)), 
  -- 1, 32, 7, fm)
  p32c_sub_cast <= resize(tmp_re_5, 33);
  p32c_sub_cast_1 <= resize(fft_val_re_1, 33);
  c_re_1 <= p32c_sub_cast - p32c_sub_cast_1;
  p32c_sub_cast_2 <= resize(tmp_im_5, 33);
  p32c_cast <= resize(fft_val_im_1, 33);
  p32c_cast_1 <=  - (p32c_cast);
  p32c_sub_cast_3 <= p32c_cast_1(31 DOWNTO 0);
  p32c_sub_cast_4 <= resize(p32c_sub_cast_3, 33);
  c_im_1 <= p32c_sub_cast_2 - p32c_sub_cast_4;

  br_1 <= c_re_1;

  bi_1 <= c_im_1;

  pr1 <= to_signed(0, 67);

  pr1in <= resize(pr1, 68);

  -- CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  pr2 <=  - (resize(bi_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 67));

  pr2in <= resize(pr2, 68);

  pre <= pr1in - pr2in;

  pi1 <= to_signed(0, 67);

  pi1in <= resize(pi1, 68);

  -- CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  pi2 <=  - (resize(br_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 67));

  pi2in <= resize(pi2, 68);

  pim <= pi1in + pi2in;

  ch2_val_re_tmp <= pre(63 DOWNTO 32);
  ch2_val_im_tmp <= pim(63 DOWNTO 32);

  ch2_val_re <= std_logic_vector(ch2_val_re_tmp);

  ch2_val_im <= std_logic_vector(ch2_val_im_tmp);

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      bin_tmp <= to_unsigned(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        bin_tmp <= bin_1;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  bin <= std_logic_vector(bin_tmp);

  -- 'deinterlace__instance_12__fixpt:17' ready = fft_valid & (count>fi(2048, 0, 12, 0, fm));
  -- 
  -- 'deinterlace__instance_12__fixpt:12' if isempty(count)
  -- 
  -- 'deinterlace__instance_12__fixpt:8' fm = get_fimath();
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --          Generated by MATLAB 9.12 and Fixed-Point Designer 7.4           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  ready_1 <= fft_valid AND hdlcoder_to_stdlogic(count > to_unsigned(16#800#, 12));

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ready <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ready <= ready_1;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  ce_out <= clk_enable;

END rtl;

